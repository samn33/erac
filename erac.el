; -*- Emacs-Lisp -*-
;================================================================
;    元号計算機 : Era Calculator Ver.0.1.0
;================================================================

;;;
;;; 初期化
;;;
(defun erac-initialize ()
;  (if (equal erac-default-year nil)
;	(setq erac-default-year (substring (current-time-string) -4))
;	)
  (defvar erac-default-year (substring (current-time-string) -4))
  (setq erac-alist
		'(("大化" "645" "649")
		  ("白雉" "650" "654")
		  ("斉明" "655" "661")
		  ("天智" "662" "671")
		  ("天武" "672" "685")
		  ("朱鳥" "686" "686")
		  ("持統" "687" "696")
		  ("文武" "697" "700")
		  ("大宝" "701" "703")
		  ("慶雲" "704" "707")
		  ("和銅" "708" "714")
		  ("霊亀" "715" "716")
		  ("養老" "717" "723")
		  ("神亀" "724" "728")
		  ("天平" "729" "748")
		  ("天平感宝" "749" "749")
		  ("天平勝宝" "749" "756")
		  ("天平神護" "765" "766")
		  ("神護景雲" "767" "769")
		  ("宝亀" "770" "781")
		  ("天応" "781" "781")
		  ("延暦" "782" "805")
		  ("大同" "806" "809")
		  ("弘仁" "810" "823")
		  ("天長" "824" "833")
		  ("承和" "834" "847")
		  ("嘉祥" "848" "850")
		  ("仁寿" "851" "853")
		  ("斉衡" "854" "856")
		  ("天安" "857" "858")
		  ("貞観" "859" "876")
		  ("元慶" "877" "884")
		  ("仁和" "885" "888")
		  ("寛平" "889" "897")
		  ("昌泰" "898" "900")
		  ("延喜" "901" "922")
		  ("延長" "923" "930")
		  ("承平" "931" "937")
		  ("天慶" "938" "946")
		  ("天暦" "947" "956")
		  ("天徳" "957" "960")
		  ("応和" "961" "963")
		  ("康保" "964" "967")
		  ("安和" "968" "969")
		  ("天禄" "970" "972")
		  ("天延" "973" "975")
		  ("貞元" "976" "977")
		  ("天元" "978" "982")
		  ("永観" "983" "984")
		  ("寛和" "985" "986")
		  ("永延" "987" "988")
		  ("栄祚" "989" "989")
		  ("正暦" "990" "994")
		  ("長徳" "995" "998")
		  ("長保" "999" "1003")
		  ("寛弘" "1004" "1011")
		  ("長和" "1012" "1016")
		  ("寛仁" "1017" "1020")
		  ("治安" "1021" "1023")
		  ("万寿" "1024" "1027")
		  ("長元" "1028" "1036")
		  ("長暦" "1037" "1039")
		  ("長久" "1040" "1043")
		  ("寛徳" "1044" "1045")
		  ("永承" "1046" "1052")
		  ("天喜" "1053" "1057")
		  ("康平" "1058" "1064")
		  ("治暦" "1065" "1068")
		  ("延久" "1069" "1073")
		  ("承保" "1074" "1076")
		  ("永保" "1081" "1083")
		  ("応徳" "1084" "1086")
		  ("寛治" "1087" "1093")
		  ("嘉保" "1094" "1095")
		  ("永長" "1096" "1096")
		  ("承徳" "1097" "1098")
		  ("康和" "1099" "1103")
		  ("長治" "1104" "1105")
		  ("嘉承" "1106" "1107")
		  ("天仁" "1108" "1109")
		  ("天永" "1110" "1112")
		  ("永久" "1113" "1117")
		  ("元永" "1118" "1119")
		  ("保安" "1120" "1123")
		  ("天治" "1124" "1125")
		  ("大治" "1126" "1130")
		  ("天承" "1131" "1131")
		  ("長承" "1132" "1134")
		  ("保延" "1135" "1140")
		  ("永治" "1141" "1141")
		  ("康治" "1142" "1143")
		  ("天養" "1144" "1144")
		  ("久安" "1145" "1150")
		  ("仁平" "1151" "1153")
		  ("久寿" "1154" "1155")
		  ("保元" "1156" "1158")
		  ("永暦" "1159" "1159")
		  ("応保" "1161" "1162")
		  ("長寛" "1163" "1164")
		  ("永万" "1165" "1165")
		  ("任安" "1166" "1168")
		  ("嘉応" "1169" "1170")
		  ("承安" "1171" "1174")
		  ("安元" "1175" "1176")
		  ("治承" "1177" "1180")
		  ("養和" "1181" "1181")
		  ("寿永" "1182" "1183")
		  ("元暦" "1184" "1184")
		  ("文治" "1185" "1189")
		  ("建久" "1190" "1198")
		  ("正治" "1199" "1200")
		  ("建仁" "1201" "1203")
		  ("元久" "1204" "1205")
		  ("建永" "1206" "1206")
		  ("承元" "1207" "1210")
		  ("建暦" "1211" "1212")
		  ("建保" "1213" "1218")
		  ("承久" "1219" "1221")
		  ("貞応" "1222" "1223")
		  ("元仁" "1224" "1224")
		  ("嘉禄" "1225" "1226")
		  ("安貞" "1227" "1228")
		  ("寛喜" "1229" "1231")
		  ("貞永" "1232" "1232")
		  ("天福" "1233" "1233")
		  ("文暦" "1234" "1234")
		  ("嘉禎" "1235" "1237")
		  ("暦仁" "1238" "1238")
		  ("延応" "1239" "1239")
		  ("任治" "1240" "1242")
		  ("寛元" "1243" "1246")
		  ("宝治" "1247" "1248")
		  ("建長" "1249" "1255")
		  ("康元" "1256" "1256")
		  ("正嘉" "1257" "1258")
		  ("正元" "1259" "1259")
		  ("文応" "1260" "1260")
		  ("弘長" "1261" "1263")
		  ("文永" "1264" "1274")
		  ("建治" "1275" "1277")
		  ("弘安" "1278" "1287")
		  ("正応" "1288" "1292")
		  ("永仁" "1293" "1298")
		  ("正安" "1299" "1301")
		  ("乾元" "1302" "1302")
		  ("嘉元" "1303" "1305")
		  ("徳治" "1306" "1307")
		  ("延慶" "1308" "1310")
		  ("応長" "1311" "1311")
		  ("正和" "1312" "1316")
		  ("文保" "1317" "1318")
		  ("元応" "1319" "1320")
		  ("元亨" "1321" "1323")
		  ("正中" "1324" "1325")
		  ("嘉暦" "1326" "1328")
		  ("元徳" "1329" "1330")
		  ("元弘" "1331" "1333")
		  ("建武" "1334" "1335")
		  ("延元" "1336" "1339")
		  ("興国" "1340" "1345")
		  ("正平" "1346" "1369")
		  ("建徳" "1370" "1371")
		  ("文中" "1372" "1374")
		  ("天授" "1375" "1380")
		  ("弘和" "1381" "1383")
		  ("元中" "1384" "1392")
		  ("明徳" "1390" "1393")
		  ("応永" "1394" "1427")
		  ("正長" "1428" "1428")
		  ("永享" "1429" "1440")
		  ("嘉吉" "1441" "1443")
		  ("文安" "1444" "1448")
		  ("宝徳" "1449" "1451")
		  ("享徳" "1452" "1454")
		  ("康正" "1455" "1456")
		  ("長禄" "1457" "1459")
		  ("寛正" "1460" "1465")
		  ("文正" "1466" "1466")
		  ("応仁" "1467" "1468")
		  ("文明" "1469" "1486")
		  ("長享" "1487" "1488")
		  ("延徳" "1489" "1491")
		  ("明応" "1492" "1500")
		  ("文亀" "1501" "1503")
		  ("永正" "1504" "1520")
		  ("大永" "1521" "1527")
		  ("享禄" "1528" "1531")
		  ("天文" "1532" "1554")
		  ("弘治" "1555" "1557")
		  ("永禄" "1558" "1569")
		  ("元亀" "1570" "1572")
		  ("天正" "1573" "1591")
		  ("文禄" "1592" "1595")
		  ("慶長" "1596" "1614")
		  ("元和" "1615" "1623")
		  ("寛永" "1624" "1643")
		  ("正保" "1644" "1647")
		  ("慶安" "1648" "1651")
		  ("承応" "1652" "1654")
		  ("明暦" "1655" "1657")
		  ("万治" "1658" "1660")
		  ("寛文" "1661" "1672")
		  ("延宝" "1673" "1680")
		  ("天和" "1681" "1683")
		  ("貞享" "1684" "1687")
		  ("元禄" "1688" "1703")
		  ("宝永" "1704" "1710")
		  ("正徳" "1711" "1715")
		  ("享保" "1716" "1735")
		  ("元文" "1736" "1740")
		  ("寛保" "1741" "1743")
		  ("延享" "1744" "1747")
		  ("寛延" "1748" "1750")
		  ("宝暦" "1751" "1763")
		  ("明和" "1764" "1771")
		  ("安永" "1772" "1779")
		  ("天明" "1780" "1788")
		  ("寛政" "1789" "1800")
		  ("享和" "1801" "1803")
		  ("文化" "1804" "1817")
		  ("文政" "1818" "1829")
		  ("天保" "1830" "1843")
		  ("弘化" "1844" "1847")
		  ("嘉永" "1848" "1853")
		  ("安政" "1854" "1859")
		  ("万延" "1860" "1860")
		  ("文久" "1861" "1863")
		  ("元治" "1864" "1864")
		  ("慶応" "1865" "1867")
		  ("明治" "1868" "1911")
		  ("大正" "1912" "1925")
		  ("昭和" "1926" "1988")
		  ("平成" "1989" "2018")
		  ("令和" "2019" "9999"))))

;;;
;;; 文字列から空白類(SPACE,TAB)削除
;;;
(defun erac-delete-space (str)
  (let (cc c l out)
	(setq l (string-to-list str))
	(setq out nil)
	(while (setq cc (car l))
	  (setq c (char-to-string cc))
	  (if (or (equal c " ") (equal c "\t"))
		  (setq c nil))
	  (setq out (concat out c))
	  (setq l (cdr l)))
    ; for debug
    ;(message out)(sleep-for 2)
	out
	))

;;;
;;; 和暦か西暦か元号かチェック
;;;
(defun erac-which (str)
  (let (pos ans)
	(setq pos (string-match "[0-9]" str))
	(cond
	 ((equal pos 0) (setq ans "SEIREKI"))
	 ((equal pos nil) (setq ans "ERA"))
	 (t (setq ans "WAREKI")))
	))

;;;
;;; 和暦年から西暦年への変換
;;;
(defun erac-wareki-to-seireki (str)
 (let (pos era wyear tmp-erac-alist tmp-alist start end syear flg)
   ; eraとwyearに分ける
   (setq pos (string-match "[0-9]" str))
   (setq era (substring str 0 pos))
   (setq wyear (string-to-number (substring str pos)))
   ; テンポラリリストをセット
   (setq tmp-erac-alist erac-alist)
   ; 変換
   (setq flg "")
   (while tmp-erac-alist
	 (setq tmp-alist (car tmp-erac-alist))
	 (setq tmp-era (car tmp-alist))
	 (if (equal tmp-era era)
		 (progn
		   (setq flg "t")
		   (setq tmp-alist (cdr tmp-alist))
		   (setq start (string-to-number (car tmp-alist)))
		   (setq tmp-alist (cdr tmp-alist))
		   (setq end (string-to-number (car tmp-alist)))
		   (setq syear (- (+ start wyear) 1))
		   ))
	 (setq tmp-erac-alist (cdr tmp-erac-alist)))
   (if (equal flg "")
	   nil syear)
   ))

;;;
;;; 西暦年から和暦年への変換
;;;
(defun erac-seireki-to-wareki (str)
 (let (tmp-erac-alist tmp-alist start end era syear wyear wareki ret)
   ; テンポラリリストなどをセット
   (setq tmp-erac-alist erac-alist)
   (setq wareki "")
   (setq syear (string-to-number str))
   ; 変換
   (while tmp-erac-alist
	 (setq tmp-alist (car tmp-erac-alist))
	 (setq era (car tmp-alist))
	 (setq tmp-alist (cdr tmp-alist))
	 (setq start (string-to-number (car tmp-alist)))
	 (setq tmp-alist (cdr tmp-alist))
	 (setq end (string-to-number (car tmp-alist)))

	 (if (and (>= syear start) (<= syear end))
		 (progn
		   (setq wyear (1+ (- syear start)))
		   (if (equal wareki "")
			   (setq wareki (concat era (number-to-string wyear)))
			 (setq wareki (concat wareki "/" era (number-to-string wyear)))
			 )
		   ))

	 (setq tmp-erac-alist (cdr tmp-erac-alist)))
   (if (equal wareki "") nil wareki)))

;;;
;;; 元号情報を出力
;;;
(defun erac-era-info (era)
 (let (tmp-erac-alist tmp-alist start end years flg)
   ; テンポラリリストをセット
   (setq tmp-erac-alist erac-alist)
   ; 情報抽出
   (setq flg "")
   (while tmp-erac-alist
	 (setq tmp-alist (car tmp-erac-alist))
	 (setq tmp-era (car tmp-alist))
	 (if (equal tmp-era era)
		 (progn
		   (setq flg "t")
		   (setq tmp-alist (cdr tmp-alist))
		   (setq start (string-to-number (car tmp-alist)))
		   (setq tmp-alist (cdr tmp-alist))
		   (setq end (string-to-number (car tmp-alist)))
		   (setq years (1+ (- end start)))
		   ))
	 (setq tmp-erac-alist (cdr tmp-erac-alist)))
   (if (equal flg "") nil
	 (concat era "は、" (number-to-string start) "年から" (number-to-string end)
			 "年までの" (number-to-string years) "年間続きました。"))))

;;;
;;; 単項式の処理(西暦-和暦変換/和暦-西暦変換/元号情報出力)
;;;
(defun erac-one-term (str)
  (let (kind ans)
	; 式の種別
	(setq kind (erac-which str))
    ; 種別に応じた処理
	(cond
	 ((equal kind "WAREKI")
	  (if (setq ans (erac-wareki-to-seireki str))
		  (concat str "年は、" (number-to-string ans) "年です。")
		(error "ERROR:存在しない元号が入力されました。")))
	 ((equal kind "SEIREKI")
	  (if (setq ans (erac-seireki-to-wareki str))
		  (concat str "年は、" ans "年です。")
		(error "ERROR:和暦年が存在しない西暦年が入力されました。")))
	 (t (if (setq ans (erac-era-info str))
			ans
		  (error "ERROR:存在しない元号が入力されました。")))
	 )))

;;;
;;; ２項式の処理(年差計算/年前後計算)
;;;
(defun erac-two-terms (str1 op str2)
  (let (syear1 syear2 ans-years ans-seireki ans-wareki)
    ; 第1項が指定されていない場合、第1項を現在年とする
	(if (equal str1 "")
		(setq str1 erac-default-year))
    ; 第2項が指定されていない場合、
    ; opが~のときのみ第2項を現在年とし、それ以外は第2項を0とする
	(if (equal str2 "")
		(if (equal op "~")
			(setq str2 erac-default-year)
		  (setq str2 "0")))
    ; 第1項が和暦の場合、西暦年にする
	(if (equal (erac-which str1) "WAREKI")
		(setq syear1 (erac-wareki-to-seireki str1))
	  (setq syear1 (string-to-number str1)))
    ; 第2項が和暦の場合、西暦年にする
	(if (equal (erac-which str2) "WAREKI")
		(setq syear2 (erac-wareki-to-seireki str2))
	  (setq syear2 (string-to-number str2)))
    ; 計算
	(cond
	 ((equal op "~")
	  (setq ans-years (- syear1 syear2))
	  (format "%s年と%s年との年差は、%s年です。" str1 str2 ans-years)
	  )
	 ((equal op "+")
	  (setq ans-seireki (+ syear1 syear2))
	  (setq ans-wareki (erac-seireki-to-wareki (number-to-string ans-seireki)))
	  (if (equal ans-wareki nil) (setq ans-wareki "和暦年なし"))
	  (format "%s年の%s年後は、%s(%s)年です。" str1 str2 ans-seireki ans-wareki)
	  )
	 ((equal op "-")
	  (setq ans-seireki (- syear1 syear2))
	  (setq ans-wareki (erac-seireki-to-wareki (number-to-string ans-seireki)))
	  (if (equal ans-wareki nil) (setq ans-wareki "和暦年なし"))
	  (format "%s年の%s年前は、%s(%s)年です。" str1 str2 ans-seireki ans-wareki)
	  )
	 (t (message "unknow operator!")))
	))

;;;
;;; メイン
;;;
(defun erac (str)
 (interactive "serac> ")
 (let (pos1 pos2 str1 str2 op ans)
   ;
   ; 初期化
   (erac-initialize)
   ;
   ; 空白類を削除
   (setq str (erac-delete-space str))
   ;
   ; 文字列の中の演算子の位置(pos1)
   (setq pos1 (string-match "[-\\+\\~]" str))
   ;(setq pos1 (string-match "[-\\+\\~]" "昭和39-4"))
   ;
   ; その後最初に現れる演算子以外の位置(pos2)
   (setq pos2 (string-match "[^-\\+\\~]" str pos1))
   (if (equal pos2 nil) (setq pos2 (1+ pos1)))
   ;
   ; (1)演算子がない場合(pos1がnilの場合)の処理は
   ;   (1-a)西暦-和暦変換
   ;   (1-b)和暦-西暦変換
   ;   (1-c)元号情報出力
   ;
   ; (2)演算子がある場合(pos1がnil以外の場合)の処理は
   ;   (2-a)年差計算
   ;   (2-b)年前後計算
   ;
   (if (equal pos1 nil)
	   (setq ans (erac-one-term str))          ; 単項式計算
	 (setq str1 (substring str 0 pos1))
	 (setq op (substring str pos1 pos2))
	 (setq str2 (substring str pos2))
	 (setq ans (erac-two-terms str1 op str2))) ; ２項式計算
   ; for debug
   ;(message "%s %s %s" str1 op str2)(sleep-for 2)
   ;
   ; 結果表示
   (message "%s" ans)))
